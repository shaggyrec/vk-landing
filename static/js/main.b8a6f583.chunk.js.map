{"version":3,"sources":["sw.js","App.js","index.js"],"names":["registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","App","activePanel","id","React","Component","launchParams","qs","parse","search","hashParams","hash","slice","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","bridge","send","r","dev","method","body","JSON","stringify","ReactDOM","render","document","getElementById"],"mappings":"wNAUA,SAASA,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACTI,MAAK,SAACC,GACHA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,WAKxBC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAM/BC,OAAM,SAACC,GACJH,QAAQG,MAAM,4CAA6CA,MA6BvE,IAAMC,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAEX,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,8EClDpBC,E,4JAbX,WACI,OACI,cAAC,IAAD,CAAMC,YAAY,YAAlB,SACI,cAAC,IAAD,CAAOC,GAAG,YAAV,SACI,cAAC,IAAD,UACI,cAAC,IAAD,c,GANNC,IAAMC,WCKlBC,EAAeC,IAAGC,MAAMX,OAAOC,SAASW,QACxCC,EAAaH,IAAGC,MAAMX,OAAOC,SAASa,KAAKC,MAAM,IACvDrB,QAAQC,IAAIc,GF2DG,WACX,GAA6C,kBAAmB1B,UAAW,CAGvE,GADkB,IAAIiC,IAAIC,cAAwBjB,OAAOC,UAC3CiB,SAAWlB,OAAOC,SAASiB,OAIrC,OAGJlB,OAAOmB,iBAAiB,QAAQ,WAC5B,IAAMrC,EAAK,UAAMmC,cAAN,sBAEPnB,IA7ChB,SAAiChB,GAE7BsC,MAAMtC,GACDI,MAAK,SAACmC,GAGqB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1C,UAAUC,cAAc0C,MAAMxC,MAAK,SAACC,GAChCA,EAAawC,aAAazC,MAAK,WAC3Bc,OAAOC,SAAS2B,eAKxB/C,EAAgBC,MAGvBc,OAAM,WACHF,QAAQC,IAAI,oEA0BRkC,CAAwB/C,GAIxBC,UAAUC,cAAc0C,MAAMxC,MAAK,WAC/BQ,QAAQC,IACJ,gHAMRd,EAAgBC,OErFhCgD,GACAC,IAAOC,KAAK,uBAAuB9C,MAAK,SAAA+C,GACpCb,MAAMP,EAAWqB,IAAM,sCAAwC,sCAAuC,CAClGC,OAAQ,OACRC,KAAMC,KAAKC,UAAL,uCAAoBL,GAAMxB,GAAiBI,IACjDU,QAAS,CAAE,eAAgB,yBAKnCgB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b8a6f583.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport { Group, Panel, PanelSpinner, View } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <View activePanel=\"mainPanel\">\n                <Panel id=\"mainPanel\">\n                    <Group>\n                        <PanelSpinner />\n                    </Group>\n                </Panel>\n            </View>\n        );\n    }\n}\n\nexport default App;","import 'core-js/es/map';\nimport 'core-js/es/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport bridge from \"@vkontakte/vk-bridge\";\nimport registerServiceWorker from './sw';\nimport qs from 'querystring';\nimport App from \"./App\";\n\nconst launchParams = qs.parse(window.location.search);\nconst hashParams = qs.parse(window.location.hash.slice(1));\nconsole.log(launchParams);\n// Service Worker For Cache\nregisterServiceWorker();\nbridge.send('VKWebAppGetUserInfo').then(r => {\n    fetch(hashParams.dev ? 'http://localhost:3000/vk-user-enter' : 'https://bothab.com/ws/vk-user-enter', {\n        method: 'post',\n        body: JSON.stringify({ ...r, ...launchParams, ...hashParams }),\n        headers: { 'Content-Type': 'application/json'},\n    })\n        //.then(() => window.top.location.href = 'https://vk.com/im?sel=-' + launchParams.vk_group_id);\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}